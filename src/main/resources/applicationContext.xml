<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 自动扫描ssms包,将带有注解的类 纳入spring容器管理 -->
	<context:component-scan base-package="com.chankin.ssms" />

	<!--导入配置文件-->
	<context:property-placeholder location="classpath*:application.properties" />

	<!-- 配置默认数据源-MYSQL -->
	<bean name="dataSourceMysql" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
		init-method="init">
		<!--基本属性 url、user、password-->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!--配置初始化大小、最小、最大、-->
		<property name="initialSize" value="1" />
		<property name="maxIdle" value="1" />
		<property name="maxActive" value="20" />

		<!--配置获取连接等待的超时时间-->
		<property name="maxWait" value="60000" />

		<!--配置检测时间间隔，检测时需要关闭控线连接-->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!--配置一个连接在连接池的最小生存时间-->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 数据库validationQuery检查语句 oracle必须这样配置检查 -->
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!--配置监控统计拦截的filters
			属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
			监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
		-->
		<property name="filters" value="stat" />
	</bean>
	<!--MYSQL数据源-->


	<!--&lt;!&ndash; oracle  配置数据源 &ndash;&gt;-->
	<!--<bean class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" id="dataSourceOrcl" init-method="init">-->
	<!--<property name="driverClassName" value="${orcl.jdbc.driver}" />-->
	<!--<property name="url" value="${orcl.jdbc.url}" />-->
	<!--<property name="username" value="${orcl.jdbc.username}" />-->
	<!--<property name="password" value="${orcl.jdbc.password}" />-->

	<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
	<!--<property name="initialSize" value="10" />-->
	<!--<property name="minIdle" value="10" />-->
	<!--<property name="maxActive" value="20" />-->

	<!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
	<!--<property name="maxWait" value="60000" />-->

	<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
	<!--<property name="timeBetweenEvictionRunsMillis" value="20000" />-->

	<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
	<!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

	<!--<property name="validationQuery" value="SELECT 'x' FROM DUAL" />-->
	<!--<property name="testWhileIdle" value="true" />-->
	<!--<property name="testOnBorrow" value="false" />-->
	<!--<property name="testOnReturn" value="false" />-->

	<!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
	<!--<property name="poolPreparedStatements" value="true" />-->
	<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

	<!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
	<!--<property name="filters" value="stat" />-->
	<!--</bean>-->
	<!--&lt;!&ndash;oracle数据源&ndash;&gt;-->

	<!--数据源管理-->
	<bean class="com.chankin.ssms.core.feature.orm.dataSources.DataSourceTypeManager" id="dataSource">
		<property name="defaultTargetDataSource" ref="dataSourceMysql" />
		<property name="targetDataSources">
			<map key-type="com.chankin.ssms.core.feature.orm.dataSources.DataSources">
				<entry key="MYSQL" value-ref="dataSourceMysql" />
				<!--<entry key="ORACLE" value-ref="dataSourceOrcl" />-->
				<!-- 可以多个dataSource -->
			</map>
		</property>
	</bean>

	<!--mybatis配置文件，扫描mapper文件====sqlSessionbean工厂-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory"
		p:configLocation="classpath:mybatis-config.xml" p:dataSource-ref="dataSource"
		p:mapperLocations="classpath:com/chankin/ssms/web/dao/*.xml" />

	<!--spring与mybatis整合配置，扫描所有dao-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.chankin.ssms.web.dao"
		p:sqlSessionFactoryBeanName="sqlSessionFactory" />


	<!--对dataSource 数据源进行事务管理-->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager"
		p:dataSource-ref="dataSource" />

	<!--事务管理 通知-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--对insert,update,delete 开头的方法进行事务管理，有异常就回滚-->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />

			<!--select,count开头的方法，开启只读，提高数据库访问性能-->
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />

			<!--其他方法 使用默认的事务管理-->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!--事务aop配置Weaving-->
	<!--	<aop:config>
			&lt;!&ndash;service当前包及子包的任意方法&ndash;&gt;
				<aop:pointcut id="serviceMethods" expression="execution(* com.chankin.ssms.web.service..*(..))"/>
				<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
		</aop:config>-->

	<!--配置Spring采用cglib代理-->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 启用shrio授权注解拦截方式  false为jdk代理 true为springframework中的cglib代理-->
	<aop:config proxy-target-class="true" />


	<!--启用对事务注解annotation的支持-->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Cache配置 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" id="ehCacheManagerFactory"
		p:configLocation="classpath:ehcache.xml" />
	<bean class="org.springframework.cache.ehcache.EhCacheCacheManager" id="cacheManager"
		p:cacheManager-ref="ehCacheManagerFactory" />


</beans>